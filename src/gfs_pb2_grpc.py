# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import gfs_pb2 as gfs__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MasterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindLocations = channel.unary_unary(
                '/MasterService/FindLocations',
                request_serializer=gfs__pb2.FileRequest.SerializeToString,
                response_deserializer=gfs__pb2.ChunkLocations.FromString,
                _registered_method=True)
        self.GetFileLength = channel.unary_unary(
                '/MasterService/GetFileLength',
                request_serializer=gfs__pb2.FileRequest.SerializeToString,
                response_deserializer=gfs__pb2.FileLength.FromString,
                _registered_method=True)
        self.CreateFile = channel.unary_unary(
                '/MasterService/CreateFile',
                request_serializer=gfs__pb2.FileRequest.SerializeToString,
                response_deserializer=gfs__pb2.FileResponse.FromString,
                _registered_method=True)
        self.DeleteFile = channel.unary_unary(
                '/MasterService/DeleteFile',
                request_serializer=gfs__pb2.FileRequest.SerializeToString,
                response_deserializer=gfs__pb2.FileResponse.FromString,
                _registered_method=True)


class MasterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindLocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileLength(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.FindLocations,
                    request_deserializer=gfs__pb2.FileRequest.FromString,
                    response_serializer=gfs__pb2.ChunkLocations.SerializeToString,
            ),
            'GetFileLength': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileLength,
                    request_deserializer=gfs__pb2.FileRequest.FromString,
                    response_serializer=gfs__pb2.FileLength.SerializeToString,
            ),
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=gfs__pb2.FileRequest.FromString,
                    response_serializer=gfs__pb2.FileResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=gfs__pb2.FileRequest.FromString,
                    response_serializer=gfs__pb2.FileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MasterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/FindLocations',
            gfs__pb2.FileRequest.SerializeToString,
            gfs__pb2.ChunkLocations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/GetFileLength',
            gfs__pb2.FileRequest.SerializeToString,
            gfs__pb2.FileLength.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/CreateFile',
            gfs__pb2.FileRequest.SerializeToString,
            gfs__pb2.FileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/DeleteFile',
            gfs__pb2.FileRequest.SerializeToString,
            gfs__pb2.FileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChunkServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadChunk = channel.unary_unary(
                '/ChunkServerService/ReadChunk',
                request_serializer=gfs__pb2.ChunkRequest.SerializeToString,
                response_deserializer=gfs__pb2.ChunkData.FromString,
                _registered_method=True)
        self.WriteChunk = channel.unary_unary(
                '/ChunkServerService/WriteChunk',
                request_serializer=gfs__pb2.ChunkRequest.SerializeToString,
                response_deserializer=gfs__pb2.ChunkResponse.FromString,
                _registered_method=True)


class ChunkServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadChunk,
                    request_deserializer=gfs__pb2.ChunkRequest.FromString,
                    response_serializer=gfs__pb2.ChunkData.SerializeToString,
            ),
            'WriteChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteChunk,
                    request_deserializer=gfs__pb2.ChunkRequest.FromString,
                    response_serializer=gfs__pb2.ChunkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChunkServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ChunkServerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChunkServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChunkServerService/ReadChunk',
            gfs__pb2.ChunkRequest.SerializeToString,
            gfs__pb2.ChunkData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChunkServerService/WriteChunk',
            gfs__pb2.ChunkRequest.SerializeToString,
            gfs__pb2.ChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
