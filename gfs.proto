syntax = "proto3";

package gfs;

message Empty {}

message StringRequest {
  string value = 1;
}

message StringResponse {
  string value = 1;
}

message ReadRequest {
  string file_path = 1;
  int64 offset = 2;
  int64 length = 3;
}

message ReadResponse {
  bytes data = 1;
}

message ChunkHandle {
  string handle = 1;
}

message HeartbeatRequest {
  string chunkserver_id = 1;
  repeated string chunk_handles = 2;
}

message HeartbeatResponse {
  bool success = 1;
}

message AppendRequest {
  string file_path = 1;
  bytes data = 2;
}

message AppendResponse {
  bool success = 1;
  string message = 2;
}

message WriteRequest {
  string chunk_handle = 1;
  int64 version = 2;
  bytes data = 3;
  string client_id = 4;
}

message WriteResponse {
  bool success = 1;
  string message = 2;
}

message WriteCommitRequest {
  string chunk_handle = 1;
  int64 version = 2;
  string client_id = 3;
}

message WriteCommitResponse {
  bool success = 1;
  string message = 2;
}

message LeaseRequest {
  string chunk_handle = 1;
}

message LeaseResponse {
  bool success = 1;
  string primary = 2;
  repeated string secondaries = 3;
  int64 lease_expiration = 4;
}

service MasterServer {
  rpc ListFiles(StringRequest) returns (StringResponse);
  rpc CreateFile(StringRequest) returns (StringResponse);
  rpc AppendToFile(AppendRequest) returns (AppendResponse);
  rpc ReadFromFile(ReadRequest) returns (ReadResponse);
  rpc DeleteFile(StringRequest) returns (StringResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

service ChunkServer {
  rpc WriteChunk(WriteRequest) returns (WriteResponse);
  rpc WriteCommit(WriteCommitRequest) returns (WriteCommitResponse);
  rpc ReadChunk(ChunkHandle) returns (ReadResponse);
  rpc ReplicateChunk(WriteRequest) returns (WriteResponse);
}